-module(main).
-opt().
-doc("WebServer").

global Port = 8080.
global Count = 1.

print_init() -> 
	io:fwrite("Server running at port %d\n", Port).

create_default_handler(Server) ->
  DefaultRoute = http:inet_create_context(Server, "/"),
	http:inet_add_handler(
		DefaultRoute, 
		def(Exchange) -> 
			Count = Count + 1,
			Msg = file:read("index.html"),
			http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
			http:write_stream(Exchange, Msg),
			ok. 
		end
	).

create_visitors_route(Server) -> 
  HelloRoute = http:inet_create_context(Server, "/visitors"),
  http:inet_add_handler(
    HelloRoute, 
    def(Exchange) ->
			Msg = "<h1 hx-get=\"/restore_btn\" hx-swap=\"outerHTML\" hx-trigger=\"load delay:3s\">" + Count + " Visitors so far</h1>",
			http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
      http:write_stream(Exchange, Msg),
      ok. 
    end
  ).

create_image_route(Server) -> 
  HelloRoute = http:inet_create_context(Server, "/img"),
  http:inet_add_handler(
    HelloRoute, 
    def(Exchange) ->
      Data = file:read("images/image.data"),
      Msg = "<img class=\"h-45 w-45\" " + Data,
      http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
      http:write_stream(Exchange, Msg),
      ok. 
    end
  ).

create_logo_route(Server) -> 
  HelloRoute = http:inet_create_context(Server, "/logo"),
  http:inet_add_handler(
    HelloRoute, 
    def(Exchange) ->
      Data = file:read("images/image.data"),
      Msg = "<img class=\"h-10 w-10\" " + Data,
      http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
      http:write_stream(Exchange, Msg),
      ok. 
    end
  ).


create_restore_button_route(Server) -> 
  HelloRoute = http:inet_create_context(Server, "/restore_btn"),
  http:inet_add_handler(
    HelloRoute, 
    def(Exchange) ->
      Msg = "<button hx-post=\"/visitors\" hx-swap=\"outerHTML\"",
      Msg = Msg + "class=\"bg-orange-500 hover:bg-orange-600 text-gray-50 rounded-xl font-bold py-2 px-4 mt-3 rounded items-center\">Visitors</button>",
      http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
      http:write_stream(Exchange, Msg),
      ok. 
    end
  ).

create_tutorial_handler(Server) ->
  DefaultRoute = http:inet_create_context(Server, "/tutorial"),
	http:inet_add_handler(
		DefaultRoute, 
		def(Exchange) -> 
			Count = Count + 1,
			Msg = "<content id=\"main\">" + file:read("tutorials/index.html") + "</content>",
			http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
			http:write_stream(Exchange, Msg),
			ok. 
		end
	).

create_lizzard_route(Server) -> 
  HelloRoute = http:inet_create_context(Server, "/lizzard"),
  http:inet_add_handler(
    HelloRoute, 
    def(Exchange) ->
      Data = file:read("images/lizzard.data"),
      Msg = "<img class=\"h-47 w-47\" " + Data,
      http:send_exchange_response_header(Exchange, 200, string:length(Msg)),
      http:write_stream(Exchange, Msg),
      ok. 
    end
  ).


create_handlers(Server) ->
	create_default_handler(Server),
	create_visitors_route(Server),
  create_image_route(Server),
  create_logo_route(Server),
  create_restore_button_route(Server),
  create_tutorial_handler(Server),
  create_lizzard_route(Server).

main() -> 
	Server = http:create_inet_server(Port),
  create_handlers(Server),
	http:set_default_executor(Server), 
	http:start_http_server(Server), 
	print_init(),
	0.

